#!/bin/bash
#
# TPM Repository Control Command Line Interface
# Copyright (C) 2024 Deleranax
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

function printUsage {
  echo "TPM Repository Control Command Line Interface"
  echo ""
  echo "$(basename $0) <cmd> [arg1]"
  echo ""
  echo "List of commands:"
  echo "update-index <name>: (Re)Construct repository index. If the name is not specified, reuse the current repository name in index."
}

function updateIndex {
  # Get repository name : Argument must be provided or index must be readable
  if [ -z $1 ]; then
    jq ".name" -re ./index.json > /dev/null || { echo "Error: Name must be specified (cannot read index)"; exit 1; }
    repo_name=$(jq ".name" ./index.json)
    index=$(jq ".name = \"$(echo $repo_name | tr -d \")\"" <<< "{}")
  else
    index=$(jq ".name = \"$1\"" <<< "{}")
  fi

  files=()
  timestamp=$(date +%s)

  index=$(jq ".timestamp = $timestamp" <<< "$index")

  for name in $(ls packages -1 --color=no); do
    echo "Processing $name"
    hash=""

    for file in $(find "./packages/$name" -name "*.lua" -printf '%P\n' | sort); do
      echo "- $file"
      files=("${files[@]}" $file)
      index=$(jq ".packages.$name.files += [{\"path\": \"$file\", \"digest\": \"$(sha256sum "./packages/$name/$file" | cut -d " " -f 1)\"}]" <<< "$index")
    done
    echo "$index" > ./index.json
    echo "$timestamp" > timestamp

    # Source: https://stackoverflow.com/questions/22055238/search-duplicate-element-array
    uniqueNum=$(printf '%s\n' "${files[@]}" | awk '!($0 in seen){seen[$0];c++} END {print c}')
    (( uniqueNum != ${#files[@]} )) && {
      echo ""
      echo "WARNING: Found files collisions:"
      printf '%s\n' "${files[@]}" | awk '!($0 in seen){seen[$0];next} 1' | sed 's/^/- /'
    }
  done
}

case $1 in
"update-index")
  if [ -z $2 ] && ! [ -r ./index.json ]; then
    echo "Error: Name must be specified"
    exit 1
  fi
  updateIndex $2 ;;
*)
  printUsage ;;
esac

cd $OLD_WD